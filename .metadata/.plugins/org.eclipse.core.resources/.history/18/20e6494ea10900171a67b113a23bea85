/*package com.niit.collaborationPlatform.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.niit.collaborationPlatform.DAO.UserDAO;
import com.niit.collaborationPlatform.model.User;

import ch.qos.logback.classic.Logger;

@RestController
public class UserController {

	@Autowired
	public User user;

	@Autowired
	public UserDAO userDAO;

	@Autowired
	public HttpSession session;
	

	@GetMapping("/getAllUsers")
	public ResponseEntity<List<User>> getAllUsers() {
		List<User> users = userDAO.list();
		if (users.isEmpty()) {
			user.setErrorCode("100");
			user.setErrorMessage("No User is available yet");
			users.add(user);
			return new ResponseEntity<List<User>>(users, HttpStatus.OK);
		} else {
			user.setErrorCode("200");
			user.setErrorMessage("Successfully Fetched the list of the users");

			session.setAttribute("loggedInUserId", user.getEmailId());
			session.setAttribute("loggedInUserRole", user.getRole());
		}

		return new ResponseEntity<List<User>>(users, HttpStatus.OK);

	}

	@PostMapping("/login")
	public ResponseEntity<User> validateCredentials(@RequestBody User user) {
		user = userDAO.isValidUser(user.getEmailId(), user.getPassword());

		if (user == null) {
			user = new User();
			user.setErrorCode("404");
			user.setErrorMessage("Invalid credentials found");

		}

		else {
			user.setErrorCode("200");
			user.setErrorMessage("Successfully logged in as a User");
		}

		return new ResponseEntity<User>(user, HttpStatus.OK);

	}

	@PostMapping("/createNewUser")
	public ResponseEntity<User> createNewUser(@RequestBody User user) {

		if (userDAO.getById(user.getEmailId()) == null) {
			user.setStatus("Valid user");
			user.setReason("Reason1");
			user.setIsOnline("Y");

			if (userDAO.SaveUser(user) == true) {
				user.setErrorCode("200");
				user.setErrorMessage("Registration is successful...");
			} else {
				user.setErrorCode("404");
				user.setErrorMessage("Registration is not successfully...Please try again");
			}
		}

		return new ResponseEntity<User>(user, HttpStatus.OK);

	}

	@PutMapping("/UpdateUser")
	public ResponseEntity<User> UpdateExistingUser(@RequestBody User user) {
		if (userDAO.UpdateUser(user)) {
			user.setErrorCode("404");
			user.setErrorMessage("Update is not successful");
		} else {
			user.setErrorCode("202");
			user.setErrorMessage("Update is successful");
		}
		return new ResponseEntity<User>(user, HttpStatus.OK);
	}

	@GetMapping("/showMyProfile")
	public ResponseEntity<User> myProfile(){
	 String loggedInUserId= (String) session.getAttribute("loggedInUserId");
	 User user=userDAO.getById(loggedInUserId);
	 if(user==null){
		 user=new User();
		 user.setErrorCode("404");
		 user.setErrorMessage("User does not exists");
		 return new ResponseEntity<User>(user, HttpStatus.NOT_FOUND);
	 }
	return new ResponseEntity<User>(user, HttpStatus.OK);
	 
	}

	@GetMapping("/Logout")
	public ResponseEntity<User> Logout() {
		String loggedInUserId = (String) session.getAttribute("loggedInUserId");
		System.out.println(loggedInUserId);
		user.setIsOnline("N");
		user.setIsOffline(loggedInUserId);
		session.invalidate();
		user.setErrorCode("200");
		user.setErrorMessage("You have been successfully LoggedOut");
		return new ResponseEntity<User>(user, HttpStatus.OK);
	}
}
*/
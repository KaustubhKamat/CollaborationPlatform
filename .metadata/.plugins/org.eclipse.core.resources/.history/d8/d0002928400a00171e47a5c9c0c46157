package com.niit.collaborationPlatform.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.niit.collaborationPlatform.DAO.JobApplicationDAO;
import com.niit.collaborationPlatform.model.JobApplication;

import ch.qos.logback.classic.Logger;

@RestController
public class JobApplicationController {

	@Autowired
	public JobApplication jobApplication;

	@Autowired
	public JobApplicationDAO jobApplicationDAO;

	@Autowired
	HttpSession session;

	@RequestMapping("/getAllJobApplications")
	public ResponseEntity<JobApplication> getAllJobApplications() {
		List<JobApplication> jobApplications = jobApplicationDAO.list();
		if (jobApplications.isEmpty()) {
			jobApplication.setErrorCode("404");
			jobApplication.setErrorCode("Job applications were not found");
			jobApplications.addAll(jobApplications);
		}

		else {
			jobApplication.setErrorCode("202");
			jobApplication.setErrorMessage("Job applications retrieved successfully");
		}
		return new ResponseEntity<JobApplication>(jobApplication, HttpStatus.OK);
	}

	// if the user wants to apply for the job
	@RequestMapping(value = "/applyForJob/{jobId}", method = RequestMethod.POST)
	public ResponseEntity<JobApplication> applyForJob(@PathVariable("jobId") String jobId, HttpSession session) {
		String username = (String) session.getAttribute("loggedInUserId");
		System.out.println(username);

		// If user has not logged in
		if (username == null) {
			jobApplication.setErrorCode("404");
			jobApplication.setErrorMessage("Please Login to Continue");
		}

		else {
			// if user has logged in but applied for the job or not
			if (jobApplicationDAO.getJobApplication(username, jobId) == null) {
				jobApplication.setJobId(jobId);
				jobApplication.setStatus("N");
				jobApplication.setUsername(username);
				Date date_applied = new Date();
				jobApplication.setDate_applied(date_applied);
				jobApplication.setId(jobApplicationDAO.maxID());

				// if the job application is successful

				if (jobApplicationDAO.SaveJobApplication(jobApplication)) {
					jobApplication.setErrorCode("200");
					jobApplication.setErrorMessage("Applied for the job successfully");
				}

			} else {
				// if user has logged in and to check if already applied for the
				// job
				System.out.println("You have already applied for a job.. !! ..!! ..");
				jobApplication.setErrorCode("404");
				jobApplication.setErrorMessage("You have already applied for a job..");
			}
		}

		return new ResponseEntity<JobApplication>(jobApplication, HttpStatus.OK);

	}

	// if the person wants to view the list of applied jobs
	@RequestMapping(value="/getMyAppliedJobs" , method=RequestMethod.GET)
	public ResponseEntity<JobApplication> myAppliedJobs(HttpSession session)
	{
		String username=(String) session.getAttribute("loggedInUserId");
		List<JobApplication> jobApplications=new ArrayList<JobApplication>();
		if (username==null) {
			jobApplication.setErrorCode("404");
			jobApplication.setErrorMessage("Please Login to continue to view your applied jobs");
		}
		else {
			jobApplications=jobApplicationDAO.myAppliedJob(username);
		}
		return new ResponseEntity<JobApplication>(jobApplication, HttpStatus.OK);
		
	}

	// if the person is selected for the job

	public ResponseEntity<JobApplication> selectJobApplication(@PathVariable("username") String username, 
	@PathVariable("jobId")String jobId, @PathVariable("remarks") String remarks)
	
	{
		jobApplication=updateJobApplication(username, jobId, 'S', remarks)
		return null;
		
	}
	
	
}
